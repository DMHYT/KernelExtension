#include <Mob.hpp>

#ifndef KEX_PLAYER_HPP
#define KEX_PLAYER_HPP


class Agent;
class AnimationComponent;
class Attribute {public:};
class AttributeBuff { public: };
class InstantaneousAttributeBuff : public AttributeBuff {
    public:
    char filler[48];
    InstantaneousAttributeBuff(float, AttributeBuffType);
};
class AttributeInstance {
    public:
    float getCurrentValue() const;
    void setMaxValue(float);
    void addBuff(const AttributeBuff&);
};
class BlockActor;
class Camera;
class ChalkboardBlockActor;
class ChangeDimensionPacket;
class ChunkSource;
class ClientInstance;
class ClientPlayMode;
class ComplexInventoryTransaction;
class Container;
class EventPacket;
class FrameUpdateContext;
class FrameUpdateContextBase;
class HitResult;
class HudContainerManagerModel;
class InventoryMenu;
class InventoryOptions;
class InventoryTransaction;
#ifndef KEX_ITEM_HPP
    class Item;
#endif
class ItemDescriptor;
class ItemGroup;
class ItemStackBase;
#ifndef KEX_MOVEINPUTHANDLER_HPP
    class MoveInputHandler;
#endif
class NetworkChunkSubscriber;
class Packet;
class PacketObserver;
class PlayerEventCoordinator;
class PlayerInventory;
class PlayerListener;
class PlayerRespawnState;
class ResolvedTextObject;
class SerializedSkin;
class ServerMoveInputHandler;
class ServerPlayerEventCoordinator;
class ShieldItem;
class TextObjectRoot;
class Tick;

class Player : public Mob {
    public:
    static Attribute HUNGER;
    static Attribute SATURATION;
    // virtual void reloadHardcoded(Actor::InitializationMethod, const VariantParameterList&);
    // virtual void reloadHardcodedClient(Actor::InitializationMethod, const VariantParameterList&);
    // virtual void initializeComponents(Actor::InitializationMethod, const VariantParameterList&);
    // virtual void _serverInitItemStackIds();
    // virtual void remove();
    // virtual void move(const Vec3&);
    // virtual void teleportTo(const Vec3&, bool, int, int, const ActorUniqueID&);
    // virtual void* getAddPacket();
    // virtual void normalTick();
    // virtual void rideTick();
    // virtual float getRidingHeight();
    // virtual std::__ndk1::string getFormattedNameTag() const;
    // virtual bool getAlwaysShowNameTag() const;
    // virtual float getCameraOffset() const;
    // virtual bool isImmobile() const;
    // virtual bool isSleeping() const;
    // virtual bool isShootable();
    // virtual bool isBlocking() const;
    // virtual bool isDamageBlocked(const ActorDamageSource&) const;
    // virtual bool isCreativeModeAllowed();
    // virtual bool isLocalPlayer() const;
    // virtual bool isPlayer() const;
    // virtual void attack(Actor&);
    // virtual int adjustDamageAmount(int&) const;
    // virtual bool isJumping() const;
    // virtual bool isInvulnerableTo(const ActorDamageSource&) const;
    // virtual void actuallyHurt(int, const ActorDamageSource&, bool);
    // virtual void onBounceStarted(const BlockPos&, const Block&);
    // virtual void feed(int);
    // virtual void handleEntityEvent(ActorEvent, int);
    // virtual int getActorRendererId() const;
    // virtual void awardKillScore(Actor&, int);
    // virtual void setArmor(ArmorSlot, const ItemStack&);
    // virtual ItemStack* getCarriedItem() const;
    // virtual void setCarriedItem(const ItemStack&);
    // virtual void setOffhandSlot(const ItemStack&);
    // virtual ItemStack* getEquippedTotem() const;
    // virtual void consumeTotem();
    // virtual ActorType getEntityTypeId() const;
    // virtual int getPortalCooldown() const;
    // virtual int getPortalWaitTime() const;
    // virtual void onSynchedDataUpdate(int);
    // virtual bool canAddRider(Actor&) const;
    // virtual bool canBePulledIntoVehicle() const;
    // virtual void sendMotionPacketIfNeeded();
    // virtual void startSwimming();
    // virtual void stopSwimming();
    // virtual CommandPermissionLevel getCommandPermissionLevel() const;
    // virtual AnimationComponent* getAnimationComponent() const;
    // virtual void useItem(ItemStackBase&, ItemUseMethod, bool);
    // virtual float getMapDecorationRotation() const;
    // virtual bool isWorldBuilder();
    // virtual bool isCreative() const;
    // virtual bool isAdventure() const;
    // virtual void add(ItemStack&);
    // virtual void drop(const ItemStack&, bool);
    // virtual void setSize(float, float);
    // virtual void startSpinAttack();
    // virtual void stopSpinAttack();
    // virtual void die(const ActorDamageSource&);
    // virtual void* createMovementProxy();
    // virtual void _hurt(const ActorDamageSource&, int, bool, bool);
    // virtual void readAdditionalSaveData(const CompoundTag&, DataLoadHelper&);
    // virtual void addAdditionalSaveData(CompoundTag&);
    // virtual void _onSizeUpdated();
    // virtual void setSleeping(bool);
    // virtual float getSpeed() const;
    // virtual void setSpeed(float);
    // virtual void travel(float, float, float);
    // virtual void aiStep();
    // virtual int getItemUseDuration();
    // virtual float getItemUseStartupProgress();
    // virtual float getItemUseIntervalProgress();
    // virtual void* getAllHand() const;
    // virtual void* getAllEquipment() const;
    // virtual void dropEquipmentOnDeath(const ActorDamageSource&, int);
    // virtual void dropEquipmentOnDeath();
    // virtual void clearVanishEnchantedItemsOnDeath();
    // virtual void sendInventory(bool);
    // virtual bool canExistWhenDisallowMob() const;
    // virtual void* useNewAi() const;
    // virtual void initBodyControl();
    // virtual void jumpFromGround();
    // virtual void updateAi();
    // virtual void updateGliding();
    // virtual void prepareRegion(ChunkSource&);
    // virtual void destroyRegion();
    // virtual void suspendRegion();
    // virtual void resendAllChunks();
    // virtual void _fireWillChangeDimension();
    // virtual void _fireDimensionChanged();
    // virtual void changeDimensionWithCredits(AutomaticID<Dimension, int>);
    // virtual void tickWorld(const Tick&);
    // virtual void getTickingOffsets() const;
    // virtual void moveView();
    // virtual void setName(const std::__ndk1::string&);
    // virtual void checkMovementStats(const Vec3&);
    // virtual void* getCurrentStructureFeature() const;
    // virtual bool isAutoJumpEnabled() const;
    // virtual void respawn();
    // virtual void resetRot();
    // virtual void resetPos(bool);
    // virtual bool isInTrialMode();
    // virtual bool hasResource(int);
    // virtual void completeUsingTotem();
    // virtual void setPermissions(CommandPermissionLevel);
    // virtual void startDestroying();
    // virtual void stopDestroying();
    // virtual void openPortfolio();
    // virtual void openBook(int, bool, int, BlockActor*);
    // virtual void openTrading(const ActorUniqueID&, bool);
    // virtual bool canOpenContainerScreen();
    // virtual void openChalkboard(ChalkboardBlockActor&, bool);
    // virtual void openNpcInteractScreen(Actor&);
    // virtual void openInventory();
    // virtual void displayChatMessage(const std::__ndk1::string&, const std::__ndk1::string&);
    // virtual void displayClientMessage(const std::__ndk1::string&);
    // virtual void displayTextObjectMessage(const TextObjectRoot&);
    // virtual void displayTextObjectWhisperMessage(const ResolvedTextObject&, const std::__ndk1::string&, const std::__ndk1::string&);
    // virtual void displayWhisperMessage(const std::__ndk1::string&, std::__ndk1::string const, const std::__ndk1::string&, const std::__ndk1::string&);
    // virtual void startSleepInBed(const BlockPos&);
    // virtual void stopSleepInBed(bool, bool);
    // virtual bool canStartSleepInBed();
    // virtual int getSleepTimer() const;
    // virtual int getPreviousTickSleepTimer() const;
    // virtual void openSign(const BlockPos&);
    // virtual void playEmote(const std::__ndk1::string&);
    // virtual bool isHostingPlayer() const;
    // virtual bool isLoading() const;
    // virtual bool isPlayerInitialized() const;;
    // virtual void stopLoading();
    // virtual void registerTrackedBoss(ActorUniqueID);
    // virtual void unRegisterTrackedBoss(ActorUniqueID);
    // virtual void setPlayerGameType(GameType);
    // virtual void _crit(Actor&);
    // virtual void* getEventing() const;
    // virtual void* getUserId() const;
    // virtual void* sendEventPacket(EventPacket&) const;
    // virtual void addExperience(int);
    // virtual void addLevels(int);
    // /*pure*/ virtual void inventoryChanged(Container&, int, const ItemStack&, const ItemStack&, bool);
    // /*pure*/ virtual void deleteContainerManager();
    // virtual void setFieldOfViewModifier(float);
    // virtual bool is2DPositionRelevant(AutomaticID<Dimension, int>, const BlockPos&);
    // virtual bool isEntityRelevant(const Actor&);
    // /*pure*/ virtual void onSuspension();
    // virtual void onLinkedSlotsChanged();
    // virtual void startCooldown(const Item*);
    // virtual int getItemCooldownLeft(const std::__ndk1::string&) const;
    // virtual bool isItemInCooldown(const std::__ndk1::string&) const;
    // /*pure*/ virtual void* sendNetworkPacket(Packet&) const;
    // /*pure*/ virtual void reportMovementTelemetry(MovementEventType);
    // virtual void onMovePlayerPacketNormal(const Vec3&, const Vec2&, float);
    void _applyExhaustion(const Vec3&);
    void setCursorSelectedItemGroup(const ItemGroup&);
    void stopGliding();
    bool isChatAllowed();
    void* getContainerManager();
    void setLastHurtBy(ActorType);
    void _registerPlayerAttributes();
    bool getHasSeenCredits() const;
    void updateCreativeItemList();
    int getLuck();
    void setDefaultHeadHeight();
    void setAgent(Agent*);
    bool forceAllowEating() const;
    int _calculateCritDamage(int&) const;
    void tickArmor();
    void* getClientSubId() const;
    ActorType getLastHurtBy() const;
    bool shouldShowCredits() const;
    bool /*?*/ _validateSpawnPositionAvailability(const Vec3&, BlockSource*, const Vec3*) const;
    void queueOnScreenTextureAnimation(unsigned int);
    void setPlayerUIItem(PlayerUISlot, const ItemStack&);
    void _touch(Actor&);
    void* getClientId() const;
    void useMapAnimationComponent(bool);
    bool checkNeedAutoJump(float, float);
    void causeFoodExhaustion(float);
    void _addLevels(int);
    void setSelectedItem(const ItemStack&);
    unsigned int getCurrentOnScreenAnimationEffectID() const;
    bool _validateSpawnIsEmpty(BlockPos);
    bool hasOpenContainerOfContainerType(ContainerType) const;
    void setRespawnReady(const Vec3&);
    Agent* getAgent() const;
    void _tickCooldowns();
    bool checkSpawnBlock(const BlockSource&) const;
    GameType getPlayerGameType() const;
    Item* getItemInUse() const;
    bool isBouncing() const;
    void broadcastPlayerSpawnedMobEvent(ActorType, MobSpawnMethod);
    void _setBlockedUsingShieldTimeStamp(long long);
    void useUIAnimationComponent(bool);
    void checkBed(BlockSource*, const Vec3*);
    bool getBlockRespawnUntilClientMessage() const;
    bool canDestroy(const Block&) const;
    ItemStack* getPlayerUIItem(PlayerUISlot);
    bool _shouldAdjustYToSolidGroundOnSpawn(bool, bool, bool, bool, bool);
    int getPlayerLevel() const;
    PlayerInventory* getSupplies() const;
    bool isForcedRespawn() const;
    void moveCape();
    void setBedRespawnPosition(const BlockPos&);
    bool _isChunkSourceLoaded(const Vec3&, const BlockSource&) const;
    void setEnchantmentSeed(int);
    std::__ndk1::string getInteractText() const;
    int getTicksUsingItem();
    bool canUseOperatorBlocks() const;
    BlockPos* getSpawnPosition() const;
    bool isViewer() const;
    int getScore();
    void onResetBAI(int);
    void clearRespawnPosition();
    // void fireDimensionChangedEvent(AutomaticID<Dimension, int>);
    void _registerElytraLoopSound();
    void clearCreativeItemList();
    Dimension* getSpawnDimension() const;
    long long getBlockedUsingDamagedShieldTimeStamp() const;
    void _findValidPosWithVerticalSpace(BlockPos);
    void updateInventoryTransactions();
    void handleJumpEffects();
    bool isHurt();
    Agent* getAgentIfAllowed(bool, ActorUniqueID) const;
    void* getSelectedItemSlot() const;
    Vec3* getDirection() const;
    bool _isDangerousSpawn(BlockSource&, const AABB&);
    unsigned int getChunkRadius() const;
    int getXpNeededForNextLevel() const;
    bool isEmoting() const;
    void setBlockRespawnUntilClientMessage(bool);
    float getLevelProgress() const;
    BlockPos* getSpawnPositioningTestPosition() const;
    GameType getUnmappedPlayerGameType();
    int getExpectedSpawnDimensionId() const;
    void _blockUsingShield(const ActorDamageSource&, float);
    HudContainerManagerModel* getHudContainerManagerModel();
    void* getFilteredCreativeItemList() const;
    BlockPos* getRespawnAnchorPosition() const;
    ActorUniqueID* getAgentID() const;
    bool isInCreativeMode() const;
    PlayerInventory* getSupplies();
    void useSelectedItem(ItemUseMethod, bool);
    float getDestroyProgress(const Block&) const;
    bool hasRespawnAnchorPosition() const;
    void setHasSeenCredits(bool);
    bool hasRespawnPosition() const;
    void resetOnScreenAnimationTicks();
    void _fixup4JBedSpawnPosition(Vec3&);
    void _chooseSpawnArea();
    bool hasBedPosition() const;
    bool getUsedPotion();
    void _setStartedBlockingTimeStamp(long long);
    bool isSleepingLongEnough() const;
    void* getSleepRotation() const;
    int getMapIndex();
    void setRespawnPositionCandidate();
    bool isHiddenFrom(Mob&) const;
    std::__ndk1::string getRespawnMessage() const;
    void* getCapePos(float);
    void* getCreativeItemList() const;
    void setCursorSelectedItem(const ItemStack&);
    int getAttackDamage();
    void setPlatformOnlineId(const std::__ndk1::string&);
    void setChunkRadius(unsigned int);
    bool _ensureSafeSpawnPosition(Vec3&);
    int getOnScreenAnimationTicks() const;
    int getEnchantmentSeed() const;
    void* getStandingPositionOnBlock(const BlockPos&);
    void _handleCarriedItemInteractText();
    void resetPlayerLevel();
    void _preSpawnBuildSpawnDataCache();
    bool equippedArmorItemCanBeMoved(const ItemStack&) const;
    int getNewEnchantmentSeed();
    void* getPlayerSessionId() const;
    void interact(Actor&, const Vec3&);
    void* getSkin();
    void setUsedPotion(bool);
    long long getBlockedUsingShieldTimeStamp() const;
    void* getTrackedBosses();
    void setPlatform(BuildPlatform);
    void _sendShieldUpdatePacket(const ShieldItem&, const ItemStack&, const ItemStack&, ContainerID, int);
    void eat(int, float);
    PlayerInventory* getInventory() const;
    void setMapIndex(int);
    bool isHungry() const;
    int getXpNeededForLevelRange(int, int) const;
    float getDestroySpeed(const Block&) const;
    void updateSpawnChunkView();
    CommandPermissionLevel getPlayerPermissionLevel() const;
    bool isSpawned() const;
    BlockPos* getBedPosition() const;
    bool isSurvival() const;
    bool isInRaid() const;
    void updateTrackedBosses();
    void* getPlayerIndex() const;
    void* getSkin() const;
    void setEmotingStatus(bool);
    void dropCursorSelectedItemOnDeath();
    void spawnExperienceOrb(const Vec3&, int);
    // void setSpawnBlockRespawnPosition(const BlockPos&, AutomaticID<Dimension, int>);
    void startGliding();
    void startUsingItem(const ItemStack&, int);
    std::__ndk1::string getPlatformOnlineId() const;
    bool isRespawningFromTheEnd() const;
    BlockPos* getExpectedSpawnPosition() const;
    // void setRespawnPosition(const BlockPos&, AutomaticID<Dimension, int>, const BlockPos&);
    std::__ndk1::string getItemInteractText(const Item&) const;
    void* getCurrentActiveShield() const;
    void recheckSpawnPosition();
    void removeListener(PlayerListener&);
    void* getItemStackNetManager();
    bool hasOpenContainer() const;
    void updateSkin(const SerializedSkin&, int);
    BuildPlatform getPlatform() const;
    void setAllPlayersSleeping();
    bool canUseAbility(AbilitiesIndex) const;
    bool isUsingItem() const;
    void* getSkinAdjustments() const;
    void stopUsingItem();
    void onMobStatusChanged(ActorUniqueID);
    void addListener(PlayerListener&);
    float _getItemDestroySpeed(const Block&) const;
    // void moveSpawnView(const Vec3&, AutomaticID<Dimension, int>);
    void setUnderwaterLightLevel(float);
    void eat(const ItemStack&);
    ItemStack* getSelectedItem() const;
    bool hasResource(const ItemDescriptor&);
    bool _shouldCrit(const Actor&) const;
    long long getBlockingStartTimeStamp() const;
    PlayerInventory* getInventory();
    void crackBlock(const BlockPos&, unsigned char);
    bool isSlowedByItemUse() const;
    void releaseUsingItem();
    void _setBlockedUsingDamagedShieldTimeStamp(long long);
    // void setRespawnPosition(const BlockPos&, AutomaticID<Dimension, int>);
    float getUnderwaterLightLevel() const;
    void _updateInteraction();
    void* getCertificate() const;
    bool isOperator() const;
    void* getCursorSelectedItem() const;
    void setPlayerIndex(int);
    void* getItemStackNetManager() const;
    bool hasOwnedChunkSource() const;
    void resetToDefaultGameMode();
    void _chooseSpawnPositionWithinArea();
    bool canBeSeenOnMap() const;
    void take(Actor&, int, int);
    // Added by InnerCore
    float getExhaustion() const;
    // Added by InnerCore
    float getExperience() const;
    // Added by InnerCore
    float getHunger() const;
    // Added by InnerCore
    float getSaturation() const;
    // Added by InnerCore
    float getExpLevel() const;
};


#endif //KEX_PLAYER_HPP